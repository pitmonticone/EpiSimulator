338*10^(+0),
3.00*10^(+0),
2.47*10^(+0),
0.44*10^(+0),
0.83*10^(+0),
3.80*10^(+0),
7.00*10^(+0),
0.99*10^(+0),
3.00*10^(+0),
1.00*10^(+0),
4.50*10^(+0),
1.00*10^(+0),
1.50*10^(+0),
3.98*10^(-8),
3.12*10^(-8),
8.11*10^(-2),
109*10^(+0),
1.00*10^(+0),
3.00*10^(+0),
5.9*10^(+0),
5.00*10^(+0),
0.00*10^(+0),
1.25*10^(+0),
2.00*10^(+0)
)
CHP.poplar <- c(
2.68*10^(-1),
1.49*10^(-2),
1.51*10^(-7),
5.93*10^(-2),
5.34*10^(-1),
6.42*10^(-4),
9.12*10^(-3),
0.00*10^(+0),
0.00*10^(+0),
4.01*10^(-10),
1.19*10^(-11),
73.8*10^(+0),
405*10^(+0),
10.0*10^(+0),
21.0*10^(+0),
0.53*10^(+0),
2.00*10^(+0),
5.60*10^(+0),
7.00*10^(+0),
0.85*10^(+0),
3.00*10^(+0),
3.00*10^(+0),
2.50*10^(+0),
1.00*10^(+0),
3.00*10^(+0),
1.84*10^(-7),
1.43*10^(-7),
1.68*10^(-2),
10.0*10^(+0),
3.50*10^(+0),
3.17*10^(+0),
1.00*10^(+0),
1.00*10^(+0),
0.00*10^(+0),
3.75*10^(+0),
3.00*10^(+0)
)
CHP.straw <- c(
1.12*10^(-1),
7.05*10^(-3),
8.01*10^(-8),
3.28*10^(-2),
1.00*10^(-4),
2.82*10^(-4),
9.44*10^(-3),
0.00*10^(+0),
0.00*10^(+0),
2.22*10^(-10),
5.65*10^(-12),
65.7*10^(+0),
236*10^(+0),
10.0*10^(+0),
21.0*10^(+0),
0.44*10^(+0),
2.00*10^(+0),
4.00*10^(+0),
7.00*10^(+0),
0.85*10^(+0),
3.00*10^(+0),
3.00*10^(+0),
2.50*10^(+0),
1.00*10^(+0),
3.00*10^(+0),
2.41*10^(-7),
1.85*10^(-7),
1.68*10^(-2),
10.0*10^(+0),
3.50*10^(+0),
3.17*10^(+0),
1.00*10^(+0),
1.00*10^(+0),
0.00*10^(+0),
3.75*10^(+0),
3.00*10^(+0)
)
PV.Si <- c(
1.37*10^(-1),
4.61*10^(-2),
2.28*10^(-6),
7.83*10^(-3),
3.68*10^(-3),
1.86*10^(-3),
2.18*10^(-4),
0.00*10^(+0),
0.00*10^(+0),
5.71*10^(-9),
3.54*10^(-11),
60.1*10^(+0),
123*10^(+0),
10.0*10^(+0),
40.0*10^(+0),
0.00*10^(+0),
2.00*10^(+0),
0.00*10^(+0),
2.00*10^(+0),
0.12*10^(+0),
3.00*10^(+0),
2.50*10^(+0),
4.50*10^(+0),
1.00*10^(+0),
3.00*10^(+0),
8.77*10^(-9),
9.03*10^(-9),
1.00*10^(-4),
5.00*10^(+0),
1.00*10^(+0),
2.17*10^(+0),
2.00*10^(+0),
2.00*10^(+0),
0.00*10^(+0),
3.00*10^(+0),
1.00*10^(+0)
)
PV.buildSi <- c(
1.33*10^(-1),
4.61*10^(-2),
2.29*10^(-6),
8.24*10^(-3),
3.70*10^(-3),
1.88*10^(-3),
2.17*10^(-4),
0.00*10^(+0),
0.00*10^(+0),
3.17*10^(-9),
3.64*10^(-11),
66.0*10^(+0),
126*10^(+0),
10.0*10^(+0),
0.00*10^(+0),
0.00*10^(+0),
0.50*10^(+0),
0.20*10^(+0),
2.00*10^(+0),
0.12*10^(+0),
3.00*10^(+0),
2.50*10^(+0),
4.50*10^(+0),
1.00*10^(+0),
3.00*10^(+0),
9.03*10^(-9),
9.27*10^(-9),
1.00*10^(-4),
5.00*10^(+0),
1.00*10^(+0),
2.17*10^(+0),
2.00*10^(+0),
2.00*10^(+0),
0.00*10^(+0),
3.00*10^(+0),
1.00*10^(+0)
)
PV.buildCdTe <- c(
5.59*10^(-2),
1.89*10^(-2),
3.66*10^(-7),
2.81*10^(-3),
2.19*10^(-4),
8.02*10^(-4),
8.22*10^(-5),
0.00*10^(+0),
0.00*10^(+0),
1.69*10^(-9),
1.45*10^(-11),
68.3*10^(+0),
140*10^(+0),
10.0*10^(+0),
1.00*10^(+0),
0.00*10^(+0),
0.50*10^(+0),
0.20*10^(+0),
2.00*10^(+0),
0.12*10^(+0),
3.00*10^(+0),
2.50*10^(+0),
4.50*10^(+0),
1.00*10^(+0),
3.00*10^(+0),
4.80*10^(-9),
4.50*10^(-9),
1.00*10^(-4),
5.00*10^(+0),
1.00*10^(+0),
2.17*10^(+0),
3.00*10^(+0),
3.00*10^(+0),
0.00*10^(+0),
3.00*10^(+0),
1.00*10^(+0)
)
So.Th <- c(
2.22*10^(-1),
1.91*10^(-2),
1.38*10^(-7),
2.18*10^(-2),
4.98*10^(-3),
1.16*10^(-3),
5.08*10^(-4),
0.00*10^(+0),
0.00*10^(+0),
5.46*10^(-9),
1.57*10^(-11),
60.2*10^(+0),
100*10^(+0),
10.0*10^(+0),
1217*10^(+0),
0.00*10^(+0),
3.00*10^(+0),
0.00*10^(+0),
2.00*10^(+0),
0.54*10^(+0),
3.00*10^(+0),
2.00*10^(+0),
4.00*10^(+0),
1.00*10^(+0),
3.50*10^(+0),
1.53*10^(-8),
1.42*10^(-8),
2.07*10^(-4),
5.00*10^(+0),
1.00*10^(+0),
2.00*10^(+0),
1.00*10^(+0),
1.00*10^(+0),
0.00*10^(+0),
3.00*10^(+0),
1.50*10^(+0)
)
W.Off <- c(
6.24*10^(-2),
1.11*10^(-2),
4.07*10^(-6),
3.25*10^(-3),
1.79*10^(-4),
9.91*10^(-3),
5.08*10^(-5),
0.00*10^(+0),
0.00*10^(+0),
2.17*10^(-9),
8.37*10^(-12),
76.4*10^(+0),
48.00*10^(+0),
10.0*10^(-9),
27.0*10^(-12),
0.00*10^(+0),
2.00*10^(+0),
4.70*10^(+0),
3.00*10^(+0),
0.40*10^(+0),
3.50*10^(+0),
2.00*10^(+0),
4.00*10^(+0),
1.50*10^(+0),
4.00*10^(+0),
5.08*10^(-9),
5.72*10^(-9),
2.77*10^(-3),
10.0*10^(+0),
1.00*10^(+0),
2.67*10^(+0),
2.00*10^(+0),
2.00*10^(+0),
0.00*10^(+0),
2.00*10^(+0),
1.00*10^(+0)
)
technology <- c("EPR","SFR","PC","PC-postCCS","PC-oxyCCS","IGCC","IGCC-CCS","GTCC","GTCC-CCS","IC-CHP","MCFC-NG","MCFC-WG","SOFC-NG","CHP-poplar","CHP-straw","PV-Si","PV-buildSi","PV-buildCdTe","Solar Thermal","Wind Offshore")
alternative <- rep(technology,36) %>% factor()
alternative.category <- c()
criterion <- c(rep("Environmental",11*20),
rep("Economic",9*20),
rep("Social",16*20)
) %>% factor()
subcriterion <- c(rep("Resources",3*20),
rep("Climate",20),
rep("Ecosystems",5*20),
rep("Waste",2*20),
rep("Customers",20),
rep("Society",2*20),
rep("Utility",6*20),
rep("Security",3*20),
rep("Political Legitimacy",2*20),
rep("Risk",9*20),
rep("Quality of Residential Environment",2*20)
) %>% factor()
subsubcriterion <- c(rep("Energy",2*20),
rep("Minerals",20),
rep("Carbon Intensity",20),
rep("Normal Operation",3*20),
rep("Severe Accident",2*20),
rep("Chemical Waste",20),
rep("Radioactive Waste",20),
rep("Generation Cost",20),
rep("Jobs",20),
rep("Fuel Autonomy",20),
rep("Financial",3*20),
rep("Operation",3*20),
rep("Political Continuity",2*20),
rep("Adaptability",20),
rep("Conflict",20),
rep("Participation",20),
rep("Normal Risk",2*20),
rep("Severe Accidents",2*20),
rep("Perceived Risk",2*20),
rep("Terrorism",3*20),
rep("Landscape",20),
rep("Noise",20)
) %>% factor()
indicator <- c(rep("Fossil Fuels",20),
rep("Uranium",20),
rep("Metal Ores",20),
rep("Carbon Intensity",20),
rep("Biodiversity",20),
rep("Ecotoxicity",20),
rep("Air Pollution",20),
rep("Hydrocarbons",20),
rep("Land Contamination",20),
rep("Chemical Waste",20),
rep("Radioactive Waste",20),
rep("Generation Cost",20),
rep("Jobs",20),
rep("Fuel Autonomy",20),
rep("Financial Risk",20),
rep("Fuel Sensitivity",20),
rep("Construction Time",20),
rep("Marginal Cost",20),
rep("Flexibility",20),
rep("Availability",20),
rep("Secure Supply",20),
rep("Waste repository",20),
rep("Adaptability",20),
rep("Conflict",20),
rep("Participation",20),
rep("Mortality",20),
rep("Morbidity", 20),
rep("Expected Mortality",20),
rep("Maximum Fatalities", 20),
rep("Perceived Risk Normal Operation",20),
rep("Perceived Risk Accident", 20),
rep("Terrorism Potential",20),
rep("Terrorism Effects", 20),
rep("Terrorism Proliferation",20),
rep("Landscape ", 20),
rep("Noise", 20)
) %>% factor()
units <- c(rep("MJ/kWh",20),
rep("MJ/kWh",20),
rep("kg(Sb_eq)/kWh",20),
rep("kg(CO2_eq)/kWh",20),
rep("PDF*m2*a/kWh",20),
rep("PDF*m2*a/kWh",20),
rep("PDF*m^2*a/kWh",20),
rep("t/GWe-yr",20),
rep("km2/GWe-yr ",20),
rep("kg/kWh ",20),
rep("m3/kWh ",20),
rep("€/MWh ",20),
rep("Person-years/GWh ",20),
rep("Ordinal",20),
rep("€",20),
rep("Factor",20),
rep("Years ",20),
rep("€cents/kWh",20),
rep("Ordinal",20),
rep("Factor",20),
rep("Ordinal",20),
rep("Ordinal",20),
rep("Ordinal",20),
rep("Ordinal",20),
rep("Ordinal",20),
rep("YOLL/kWh",20),
rep("DALY/kWh ",20),
rep("Fatalities/GWe-yr ",20),
rep("Fatalities/accident ",20),
rep("Ordinal",20),
rep("Ordinal",20),
rep("Ordinal",20),
rep("Expected number of fatalities",20),
rep("Binary",20),
rep("Ordinal",20),
rep("Ordinal",20)
) %>% factor()
performance <- c()
for(i in seq(1,36,1)){
performance <- c(performance,
EPR[i],
SFR[i],
PC[i],
PC.postCCS[i],
PC.oxyCCS[i],
IGCC[i],
IGCC.CCS[i],
GTCC[i],
GTCC.CCS[i],
IC.CHP[i],
MCFC.NG[i],
MCFC.WG[i],
SOFC.NG[i],
CHP.poplar[i],
CHP.straw[i],
PV.Si[i],
PV.buildSi[i],
PV.buildCdTe[i],
So.Th[i],
W.Off[i])
alternative.category <- c(alternative.category,
rep("Nuclear",2),
rep("Advanced Fossil",8),
rep("Fuel Cells",3),
rep("Biomass",2),
rep("Solar",4),
rep("Wind",1)
)
}
needs.data <- data.frame(alternative.category,alternative,criterion,subcriterion,subsubcriterion,indicator,performance, units)
colnames(needs.data) <- c("Category","Technology","Criterion", "SubCriterion", "SubSubCriterion", "Indicator", "Performance", "Units")
write.csv(needs.data, "needs-italy.csv")
datatable(needs.data)
install.packages("DT")
library(flexdashboard)
library(DT)
library(tidyverse)
library(leaflet) # geospatial mapping
library(dygraphs) # time series charting
library(plotly) # interactive graphics with D3
library(rbokeh) # interface to Bokeh, a powerful declarative Bokeh framework for creating web-based plots.
library(highcharter) # a rich R interface to the popular Highcharts JavaScript graphics library.
library(visNetwork) # interface to the network visualization capabilities of the vis.js library.
library(networkD3) # Graph data visualization with D3
library(d3heatmap) # interactive heatmaps with D3
library(DiagrammeR) # diagrams and flowcharts
# Both static (a standard web page) and dynamic/interactive (a Shiny interactive document) complex data visualization
needs.italy <- read_csv("data/needs-italy.csv")
datatable(needs.data)
View(needs.italy)
install.packages("Runiversal")
* [**]()
* [**]()
* [**]()
* [**]()
install.packages(c("checkmate", "dendextend", "dplyr", "DT", "hexbin", "jsonlite", "knitr", "mime", "nlme", "processx", "raster", "rlang", "rstudioapi", "rticles", "tidypredict", "tidyselect", "yaml"))
install.packages("xaringan")
install_github("armcompanion")
install.packages("remotes")
install_github("armcompanion")
devtools::install_github("rstudio/addinexamples", type = "source")
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
install.packages("revealjs")
# install.packages("devtools")
devtools::install_github("gadenbuie/xaringanthemer")
> devtools::install_github("gadenbuie/xaringanthemer")
devtools::install_github("gadenbuie/xaringanthemer")
force=TRUE
devtools::install_github("gadenbuie/xaringanthemer")
force = TRUE
# install.packages("devtools")
devtools::install_github("gadenbuie/xaringanthemer")
install.packages("xaringanthemer")
install_github("gadenbuie/xaringanthemer")
devtools::install_github("gadenbuie/xaringanthemer")
devtools::install_github("gadenbuie/xaringanthemer", force = TRUE)
install.packages("ICON")
install.packages("knitr")
install_github('slidify', 'ramnathv')
devtools::install_github('slidify', 'ramnathv')
evtools::install_github('slidify', 'ramnathv')
evtools::install_github('slidify', 'ramnathv')
devtools::install_github('slidify', 'ramnathv')
devtools::install_github("ropenscilabs/icon")
knitr::opts_chunk$set(message = FALSE, warning = FALSE, include = FALSE)
library(DT)
library(knitr)
library(tidyverse)
needs.italy <- read_csv("data/needs-italy.csv")
datatable(head(needs.italy), extensions = "Buttons", options = list(
dom = 'Bfrtip',
buttons = list('copy', 'print', list(
extend = 'collection',
buttons = c('csv', 'excel', 'pdf'),
text = 'Download'
))
))
![**Fig. 1 | Radar charts of environmental impacts of different types of power plants compared to the current global average power mix.**](figures/papers/r&s/fig1.png)
![**Fig. 1 | Radar charts of environmental impacts of different types of power plants compared to the current global average power mix.**](figures/papers/r&s/fig1.png)
